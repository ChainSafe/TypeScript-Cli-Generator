{"version":3,"sources":["../src/cli.ts"],"names":["name","description","require","topBanner","bottomBanner","getCli","hydra","yargs","env","parserConfiguration","options","globalOptions","scriptName","demandCommand","showHelpOnFail","usage","epilogue","alias","recommendCommands","cmd","cmds","strict"],"mappings":";;;;;;;AACA;;AACA;;AACA;;AACA;;;;AAJA;AAMA,MAAM;AAACA,EAAAA,IAAD;AAAOC,EAAAA;AAAP,IAAsBC,OAAO,CAAC,iBAAD,CAAnC;;AAEA,MAAMC,SAAS,GAAGF,WAAlB;AACA,MAAMG,YAAY,GAAG,gDAArB;AAEA;AACA;AACA;AACA;;AACO,SAASC,MAAT,GAA8B;AACnC,QAAMC,KAAK,GAAGC,eACXC,GADW,CACPR,IADO,EACD;AADC,GAEXS,mBAFW,CAES;AACnB;AACA;AACA,oBAAgB;AAHG,GAFT,EAOXC,OAPW,CAOHC,sBAPG,EAQZ;AARY,GASXC,UATW,CASA,EATA,EAUXC,aAVW,CAUG,CAVH,EAWZ;AAXY,GAYXC,cAZW,CAYI,KAZJ,EAaXC,KAbW,CAaLZ,SAbK,EAcXa,QAdW,CAcFZ,YAdE,EAeXa,KAfW,CAeL,GAfK,EAeA,MAfA,EAgBXA,KAhBW,CAgBL,GAhBK,EAgBA,SAhBA,EAiBXC,iBAjBW,EAAd,CADmC,CAoBnC;;;AACA,OAAK,MAAMC,GAAX,IAAkBC,UAAlB,EAAwB;AACtB,sCAAuBd,KAAvB,EAA8Ba,GAA9B;AACD,GAvBkC,CAyBnC;;;AACAb,EAAAA,KAAK,CAACY,iBAAN,GAA0BG,MAA1B;AAEA,SAAOf,KAAP;AACD","sourcesContent":["// Must not use `* as yargs`, see https://github.com/yargs/yargs/issues/1131\nimport yargs from \"yargs\";\nimport {cmds} from \"./cmds\";\nimport {globalOptions} from \"./options\";\nimport {registerCommandToYargs} from \"./util\";\n\nconst {name, description} = require(\"../package.json\");\n\nconst topBanner = description;\nconst bottomBanner = \"For more information, check the CLI docs [...]\";\n\n/**\n * Common factory for running the CLI and running integration tests\n * The CLI must actually be executed in a different script\n */\nexport function getCli(): yargs.Argv {\n  const hydra = yargs\n    .env(name) // TODO: Change this!\n    .parserConfiguration({\n      // As of yargs v16.1.0 dot-notation breaks strictOptions()\n      // Manually processing options is typesafe tho more verbose\n      \"dot-notation\": false,\n    })\n    .options(globalOptions)\n    // blank scriptName so that help text doesn't display the cli name before each command\n    .scriptName(\"\")\n    .demandCommand(1)\n    // Control show help behaviour below on .fail()\n    .showHelpOnFail(false)\n    .usage(topBanner)\n    .epilogue(bottomBanner)\n    .alias(\"h\", \"help\")\n    .alias(\"v\", \"version\")\n    .recommendCommands();\n\n  // yargs.command and all ./cmds\n  for (const cmd of cmds) {\n    registerCommandToYargs(hydra, cmd);\n  }\n\n  // throw an error if we see an unrecognized cmd\n  hydra.recommendCommands().strict();\n\n  return hydra;\n}"],"file":"cli.js"}