{"version":3,"sources":["../../src/util/command.ts"],"names":["registerCommandToYargs","yargs","cliCommand","command","describe","builder","yargsBuilder","options","subcommand","subcommands","examples","example","description","handler","emptyHandler"],"mappings":";;;;;;;AAKA;;AAaA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,sBAAT,CAAgCC,KAAhC,EAA6CC,UAA7C,EAAsF;AAC3FD,EAAAA,KAAK,CAACE,OAAN,CAAc;AACZA,IAAAA,OAAO,EAAED,UAAU,CAACC,OADR;AAEZC,IAAAA,QAAQ,EAAEF,UAAU,CAACE,QAFT;AAGZC,IAAAA,OAAO,EAAGC,YAAD,IAAkB;AACzBA,MAAAA,YAAY,CAACC,OAAb,CAAqBL,UAAU,CAACK,OAAX,IAAsB,EAA3C;;AACA,WAAK,MAAMC,UAAX,IAAyBN,UAAU,CAACO,WAAX,IAA0B,EAAnD,EAAuD;AACrDT,QAAAA,sBAAsB,CAACM,YAAD,EAAeE,UAAf,CAAtB;AACD;;AACD,UAAIN,UAAU,CAACQ,QAAf,EAAyB;AACvB,aAAK,MAAMC,OAAX,IAAsBT,UAAU,CAACQ,QAAjC,EAA2C;AACzCJ,UAAAA,YAAY,CAACK,OAAb,CAAsB,MAAKA,OAAO,CAACR,OAAQ,EAA3C,EAA8CQ,OAAO,CAACC,WAAtD;AACD;AACF;;AACD,aAAOX,KAAP;AACD,KAdW;AAeZ;AACAY,IAAAA,OAAO,EAAEX,UAAU,CAACW,OAAX,IAAsB,SAASC,YAAT,GAA8B,CAAE;AAhBnD,GAAd;AAkBD","sourcesContent":[" \nimport {Options, Argv} from \"yargs\";\n\nexport type ICliCommandOptions<OwnArgs> = Required<{[key in keyof OwnArgs]: Options}>;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface ICliCommand<OwnArgs = Record<never, never>, ParentArgs = Record<never, never>, R = any> {\n  command: string;\n  describe: string;\n  examples?: {command: string; description: string}[];\n  options?: ICliCommandOptions<OwnArgs>;\n  // 1st arg: any = free own sub command options\n  // 2nd arg: subcommand parent options is = to this command options + parent options\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  subcommands?: ICliCommand<any, OwnArgs & ParentArgs>[];\n  handler?: (args: OwnArgs & ParentArgs) => Promise<R>;\n}\n\n/**\n * Register a ICliCommand type to yargs. Recursively registers subcommands too.\n * @param yargs\n * @param cliCommand\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function registerCommandToYargs(yargs: Argv, cliCommand: ICliCommand<any, any>): void {\n  yargs.command({\n    command: cliCommand.command,\n    describe: cliCommand.describe,\n    builder: (yargsBuilder) => {\n      yargsBuilder.options(cliCommand.options || {});\n      for (const subcommand of cliCommand.subcommands || []) {\n        registerCommandToYargs(yargsBuilder, subcommand);\n      }\n      if (cliCommand.examples) {\n        for (const example of cliCommand.examples) {\n          yargsBuilder.example(`$0 ${example.command}`, example.description);\n        }\n      }\n      return yargs;\n    },\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    handler: cliCommand.handler || function emptyHandler(): void {},\n  });\n}"],"file":"command.js"}